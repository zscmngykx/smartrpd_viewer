name: CI/CD

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          echo "Installing dependencies..."
          npm install

  lint:
      runs-on: ubuntu-latest
      needs: build
      steps:
        - uses: actions/checkout@v3
        - uses: actions/setup-node@v4
          with:
            node-version: '20'
        - run: npm install
        - name: Write ESLint flat config (if missing)
          run: |
            if [ ! -f eslint.config.js ]; then
              cat > eslint.config.js <<'EOF'
              import js from "@eslint/js";
              export default [
                js.configs.recommended,
                {
                  files: ["**/*.js"],
                  languageOptions: {
                    ecmaVersion: 2022,
                    sourceType: "module",
                    globals: {
                      window: "readonly",
                      document: "readonly",
                      console: "readonly",
                      module: "readonly",
                      require: "readonly",
                      __dirname: "readonly",
                    },
                  },
                  rules: {
                    "no-unused-vars": ["warn", { argsIgnorePattern: "^_" }],
                    "no-undef": "error",
                    "semi": ["error", "always"],
                    "quotes": ["error", "single"]
                  },
                },
              ];
              EOF
            fi
        - name: Run ESLint
          run: npx eslint . --ext .js,.jsx,.ts,.tsx


  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          echo "Installing dependencies..."
          npm install

      - name: Run unit tests
        run: |
          echo "Running tests..."
          npm run test

      - name: Install Newman for Postman testing
        run: |
          echo "Installing newman..."
          npm install -g newman

      - name: Run Postman integration tests
        run: |
          echo "Running Postman tests with newman..."
          newman run postman/smartrpd.postman_collection.json \
            -e postman/smartrpd-env.postman_environment.json \
            --reporters cli \
            --export-cookie-jar ./cookies.json \
            --insecure

  security_scan:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  docker_deploy:
    name: docker_deploy
    needs: security_scan
    runs-on: ubuntu-latest
    steps:
      - name: Set up job context
        run: echo "Preparing job execution..."

      - name: Install tools (jq, curl)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq curl

      - name: Pull remote configuration files
        run: |
          echo "Pulling remote config from httpbin..."
          curl -s https://httpbin.org/get > config-dump.json
          jq . config-dump.json | head -n 5

      - name: Check Docker environment
        run: |
          echo "Docker version:"
          docker --version
          echo "Available containers:"
          docker ps -a

      - name: Inspect system disk and memory
        run: |
          echo "Disk space:"
          df -h
          echo "Memory usage:"
          free -m

      - name: SSH into server and deploy application services
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.GCP_HOST }}
          username: ${{ secrets.GCP_USER }}
          key: ${{ secrets.GCP_SSH_KEY }}
          script: |
            echo "Stopping previous application container..."
            docker rm -f smartrpd-case-service || true

            echo "Cleaning up existing image..."
            docker rmi smartrpd-case-service || true

            echo "Accessing deployment directory..."
            cd /home/zihanliu0316/smartrpd_viewer

            echo "Building service image..."
            docker build -t smartrpd-case-service .

            echo "Launching updated service container..."
            docker run -d -p 8090:80 --name smartrpd-case-service smartrpd-case-service

      - name: Post-deployment health check
        run: |
          curl -s http://localhost:8090 || echo "App not reachable from CI"

      - name: Finalize deployment steps
        run: echo "Deployment process finished successfully."

  deploy_to_GCP:
    runs-on: ubuntu-latest
    needs: docker_deploy
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          echo "Installing dependencies..."
          npm install

      - name: Fix webpack permissions
        run: |
          echo "Fixing webpack executable permissions..."
          chmod +x node_modules/.bin/webpack || true

      - name: Build ThreeDViewer.bundle.js
        run: |
          echo "Running build..."
          npm run build
          echo "Output in dist/:"
          ls -lh dist/
          echo "Contents of src/pages:"
          ls -lh src/pages || true
          echo "Contents of css:"
          ls -lh css || true
          echo "Contents of assets:"
          ls -lh assets || true
          echo "Root-level JS in src:"
          ls -lh src/*.js || true

      - name: Clean remote deployment directory
        run: |
          echo "Cleaning old deployment and setting permissions..."
          echo "${{ secrets.GCP_SSH_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} '
            sudo rm -rf /var/www/html/* &&
            sudo mkdir -p /var/www/html &&
            sudo chown -R $USER:$USER /var/www/html
          '

      - name: Upload static assets to GCP (using scp)
        run: |
          echo "${{ secrets.GCP_SSH_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          scp -i private_key.pem -o StrictHostKeyChecking=no index.html ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }}:/var/www/html/
          scp -i private_key.pem -o StrictHostKeyChecking=no -r css assets src dist ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }}:/var/www/html/

      - name: Show deployment result on GCP
        run: |
          echo "${{ secrets.GCP_SSH_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} 'ls -R /var/www/html/'

      - name: Show access links
        run: |
          echo 'Deployment complete. Access links:'
          echo 'ðŸ”— http://${{ secrets.GCP_HOST }}/index.html'
          echo 'ðŸ”— http://${{ secrets.GCP_HOST }}/src/pages/case_list.html'
          echo 'ðŸ”— http://${{ secrets.GCP_HOST }}/src/pages/ThreeDViewer.html'
        if: success()

      - name: Deployment failure notice
        run: echo 'Build failed. Please check logs.'
        if: failure()
